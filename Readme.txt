The folder contains various .py files, which are described below.

1) GetprobsMAR_dense.py and GetprobsMAR_sparse.py:
	generate Transition probability matrices among events in the alphabet. Size of the alphabet 'M', is the only parameter of these codes and given 'M' the codes generate dense or sparse matrices which represent a dense/sparse transition probability matrix of an irreducible markov chain with 'M' events. The output would be .npy file of the name "Markov_M_<size of alphabet>_probs_<dense/sparse>.npy" containing the numpy transition matrix.




2) DataGen_NO_serial.py:
	This contains the code for generating datastream of events, given the following parameters

M = Size of the alphabet (No of events)
N_emb = No of serial episodes to be embedded
N = Length of serial episodes to be embedded
T = Desired datastream length
p = geometric parameter that determined the gap between end of an occurrence and the start of the next occurrence of embedded episodes 
eta = geometric parameter that determined the gap between two successive events of an occurrence of embedded episode.
specs = 'equal'    # This would make each row of the probability transition matrix among event uniform
specs = 'dense'    # This would load the saved dense probability transition matrix generated by GetprobsMAR_dense.py
specs = 'sparse'     # This would load the saved sparse probability transition matrix generated by GetprobsMAR_sparse.py

The output is a .txt file conatining the datastream named "Datastream_M_<M>_n_<T>_emb_<N_emb>_N_<N>_p_<p>_eta_<eta>_probs_<equal/dense/sparse>" if episodes are embedded and "Datastream_M_<M>_n_<T>_probs_<equal/dense/sparse>" if no episodes are embedded.




3) GraphGen_NO_MAR_MinDFA.py:

This code generates minimal DFA (for Markov Data) for a given episode and does the quality of approximation.

The inputs used in the code are

episodes: contains various episodes (with one maximal event) of various sizes.

M: size of alphabet (no of events)

specs = 'equal'    # This would make each row of the probability transition matrix among event uniform
specs = 'dense'    # This would load the saved dense probability transition matrix generated by GetprobsMAR_dense.py
specs = 'sparse'     # This would load the saved sparse probability transition matrix generated by GetprobsMAR_sparse.py

T_list : Contains list of values each representing the desired length of the datastream

Output of this file is a plots containing the quality of approximation of given episodes, under Data of lengths specified in T_list, size of events 'M' and Transition probability matrix of events given by 'specs'.





4) ISE_DFS_NO_SS_Ren.py

This code takes a datastream, mies out frequent closed episodes of that datastream under expriry constraint 'T_x' and frequency threshold 'F_th'. It then calculated the Statistical significance threshold for each of these frequent closed episodes and finally provides those episodes which qualified under statistical significance threshold.
